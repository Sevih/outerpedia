/* scripts/generateEventRegistry.js */
const fs = require('fs')
const path = require('path')

const EVENT_DIR = path.join(process.cwd(), 'src', 'data', 'events')
const REGISTRY_FILE = path.join(EVENT_DIR, 'registry.generated.ts')
const LOADERS_FILE  = path.join(EVENT_DIR, 'loaders.ts')

/** "20251011-video.tsx" -> "E20251011Video" */
function toImportName(file) {
  const base = file.replace(/\.tsx$/, '')
  const camel = base
    .replace(/[^a-zA-Z0-9]+(.)/g, (_, c) => (c ? c.toUpperCase() : ''))
    .replace(/^[0-9]/, (d) => `E${d}`)
  return camel
}

/** "20251011-video.tsx" -> "20251011-video" */
function toSlug(file) {
  return file.replace(/\.tsx$/, '')
}

async function generateEventRegistry() {
  try {
    const files = await fs.promises.readdir(EVENT_DIR)

    const eventFiles = files
      .filter(f =>
        /\.tsx$/.test(f) &&
        !/^registry/i.test(f) &&
        !/^active(\.|$)/i.test(f)
      )
      .sort((a, b) => a.localeCompare(b, 'en'))

    const imports = []
    const names = []
    const loaderEntries = []

    for (const file of eventFiles) {
      const name = toImportName(file)
      const rel  = `./${file.replace(/\\/g, '/').replace(/\.tsx$/, '')}`
      const slug = toSlug(file)
      imports.push(`import ${name} from '${rel}'`)
      names.push(name)
      loaderEntries.push(
        `  '${slug}': () => import('${rel}').then(m => ({ default: m.default.Page })),`
      )
    }

    const registryContent = `/* AUTO-GENERATED by scripts/generateEventRegistry.js */
import type { EventDef } from './registry.types'
${imports.join('\n')}

export const EVENTS: EventDef[] = [${names.join(', ')}]
`

    const loadersContent = `/* AUTO-GENERATED by scripts/generateEventRegistry.js */
import type React from 'react'

export const EVENT_LOADERS: Record<string, () => Promise<{ default: React.FC }>> = {
${loaderEntries.join('\n')}
}
`

    await fs.promises.writeFile(REGISTRY_FILE, registryContent, 'utf8')
    await fs.promises.writeFile(LOADERS_FILE, loadersContent, 'utf8')

    console.log(`✅ Generated ${eventFiles.length} events`)
    console.log(`   ↳ ${path.relative(process.cwd(), REGISTRY_FILE)}`)
    console.log(`   ↳ ${path.relative(process.cwd(), LOADERS_FILE)}`)
  } catch (err) {
    console.error('❌ Error generating event registry:', err)
    process.exitCode = 1
  }
}

generateEventRegistry()
